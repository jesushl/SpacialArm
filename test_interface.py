#!/usr/bin/env python3
"""
Script de prueba para verificar la interfaz del brazo rob√≥tico
"""

import sys
import os

# Agregar el directorio del proyecto al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """Prueba que todas las importaciones funcionen"""
    print("üîç Probando importaciones...")
    
    try:
        from Arm import Arm
        print("‚úÖ Arm importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando Arm: {e}")
        return False
    
    try:
        from Vector import Vector
        print("‚úÖ Vector importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando Vector: {e}")
        return False
    
    try:
        from ImprovedGeneticSolver import ImprovedGeneticSolver
        print("‚úÖ ImprovedGeneticSolver importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando ImprovedGeneticSolver: {e}")
        return False
    
    try:
        from window.glWidget import ArmGLWidget
        print("‚úÖ ArmGLWidget importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando ArmGLWidget: {e}")
        return False
    
    return True

def test_arm_functionality():
    """Prueba la funcionalidad b√°sica del brazo"""
    print("\nü§ñ Probando funcionalidad del brazo...")
    
    try:
        from Arm import Arm
        
        # Crear brazo
        arm = Arm(3.0, 2.5, 2.0)
        print("‚úÖ Brazo creado correctamente")
        
        # Probar actualizaci√≥n
        arm.actualizeArm(
            {'gama': 0, 'theta': 0},
            {'gama': 0, 'theta': 0},
            {'gama': 0, 'theta': 0}
        )
        print("‚úÖ Brazo actualizado correctamente")
        
        # Obtener posici√≥n final
        final_pos = arm.getArmFinalPoint()
        print(f"‚úÖ Posici√≥n final: ({final_pos['x']:.2f}, {final_pos['y']:.2f}, {final_pos['z']:.2f})")
        
        return True
    except Exception as e:
        print(f"‚ùå Error en funcionalidad del brazo: {e}")
        return False

def test_genetic_solver():
    """Prueba el solver gen√©tico"""
    print("\nüß¨ Probando solver gen√©tico...")
    
    try:
        from ImprovedGeneticSolver import ImprovedGeneticSolver
        
        # Crear solver
        solver = ImprovedGeneticSolver(
            arm1Len=3.0,
            arm2Len=2.5,
            arm3Len=2.0,
            goalPoint={'x': 2.0, 'y': 1.0, 'z': 2.0}
        )
        print("‚úÖ Solver gen√©tico creado correctamente")
        
        # Verificar si el punto es alcanzable
        is_possible = solver.is_possible_shot()
        print(f"‚úÖ Punto objetivo alcanzable: {is_possible}")
        
        return True
    except Exception as e:
        print(f"‚ùå Error en solver gen√©tico: {e}")
        return False

def test_ui_file():
    """Prueba que el archivo UI existe y es v√°lido"""
    print("\nüé® Probando archivo UI...")
    
    ui_file = os.path.join("window", "main.ui")
    if os.path.exists(ui_file):
        print("‚úÖ Archivo UI encontrado")
        
        # Verificar que es un archivo XML v√°lido
        try:
            with open(ui_file, 'r') as f:
                content = f.read()
                if '<?xml' in content and 'QMainWindow' in content:
                    print("‚úÖ Archivo UI parece ser v√°lido")
                    return True
                else:
                    print("‚ùå Archivo UI no parece ser un archivo UI v√°lido")
                    return False
        except Exception as e:
            print(f"‚ùå Error leyendo archivo UI: {e}")
            return False
    else:
        print("‚ùå Archivo UI no encontrado")
        return False

def main():
    """Funci√≥n principal de pruebas"""
    print("üöÄ Iniciando pruebas de la interfaz del brazo rob√≥tico")
    print("=" * 50)
    
    tests = [
        test_imports,
        test_arm_functionality,
        test_genetic_solver,
        test_ui_file
    ]
    
    passed = 0
    total = len(tests)
    
    for test in tests:
        if test():
            passed += 1
        print()
    
    print("=" * 50)
    print(f"üìä Resultados: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        print("üéâ ¬°Todas las pruebas pasaron! La interfaz est√° lista para usar.")
        print("\nPara ejecutar la aplicaci√≥n:")
        print("  python main.py")
        return True
    else:
        print("‚ö†Ô∏è  Algunas pruebas fallaron. Revisa los errores arriba.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
